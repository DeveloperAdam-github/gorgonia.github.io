[{"uri":"/fr/getting-started/","title":"Premiers pas","tags":[],"description":"","content":" Obtenir Gorgonia Gorgonia est go-gettable et supporte les go-modules. Pour récupérer la bibliothèque ainsi que ses dépendances, il suffit d\u0026rsquo;exécuter:\n$ go get gorgonia.org/gorgonia Premier programme pour faire un calcul simple Créer ce programme simple dans un fichier main.go pour vérifier que tout est correctement installé:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;gorgonia.org/gorgonia\u0026#34; ) func main() { g := gorgonia.NewGraph() var x, y, z *gorgonia.Node var err error // define the expression  x = gorgonia.NewScalar(g, gorgonia.Float64, gorgonia.WithName(\u0026#34;x\u0026#34;)) y = gorgonia.NewScalar(g, gorgonia.Float64, gorgonia.WithName(\u0026#34;y\u0026#34;)) if z, err = gorgonia.Add(x, y); err != nil { log.Fatal(err) } // create a VM to run the program on  machine := gorgonia.NewTapeMachine(g) defer machine.Close() // set initial values then run  gorgonia.Let(x, 2.0) gorgonia.Let(y, 2.5) if err = machine.RunAll(); err != nil { log.Fatal(err) } fmt.Printf(\u0026#34;%v\u0026#34;, z.Value()) } Exécuter le programme devrait afficher le résultat 4.5.\nPour plus d\u0026rsquo;explications sur le fonctionnement, veuillez consulter le tutoriel Hello World.\n"},{"uri":"/fr/how-to/dataframe/","title":"Créer un tensor depuis un Dataframe (gota)","tags":[],"description":"","content":" Cet article explique comment créer un tenseur depuis un dataframe en utilisant le package gota.\nLe but est de lire un fichier csv et de créer un objet *tensor.Dense de forme (2,2).\nCreation du dataframe depuis le fichier csv Considerons un ficier csv avec le contenu suivant:\nsepal_length,sepal_width,petal_length,petal_width,species 5.1 ,3.5 ,1.4 ,0.2 ,setosa 4.9 ,3.0 ,1.4 ,0.2 ,setosa 4.7 ,3.2 ,1.3 ,0.2 ,setosa 4.6 ,3.1 ,1.5 ,0.2 ,setosa 5.0 ,3.6 ,1.4 ,0.2 ,setosa ... Ceci est un extrait du Iris flower data set. Une copie du dataset peut être téléchargée ici\n Nous voulons créer un tenseur qui contient toutes les valeurs sauf la colonne \u0026ldquo;species\u0026rdquo;.\nCreation du dataframe avec gota le package dataframe de gota propose une fonction ReadCSV qui prend pour argument un io.Reader.\nf, err := os.Open(\u0026#34;iris.csv\u0026#34;) if err != nil { log.Fatal(err) } defer f.Close() df := dataframe.ReadCSV(f) df est un DataFrame qui remferme toutes les données présentes dans le fichier.\ngota utilise la première ligne du fichier csv pour référencer les colonnes dans le dataframe\n Supprimons à présent la colonne species du dataframe:\nxDF := df.Drop(\u0026#34;species\u0026#34;) Conversion du dataframe vers une matrice Pour simplifier les choses, nous allons convertir le dataframe en une Matrix telle que définie dans le package gonum (cf la godoc de Matrix). Matrix est une interface. Cependant, la structure Dataframe de gota ne remplit pas le contrat d\u0026rsquo;interface Matrix Nous allons donc encapsuler l\u0026rsquo;objet dans une structure de plus haut niveau et nous allons implémenter les fonctions nécessaire au contrat d\u0026rsquo;interface telle que décrit dans la documentation de gota:\ntype matrix struct { dataframe.DataFrame } func (m matrix) At(i, j int) float64 { return m.Elem(i, j).Float() } func (m matrix) T() mat.Matrix { return mat.Transpose{Matrix: m} } Creation du tenseur Nous pouvons à présent créer un tenseur *Dense grâce à la fonction tensor.FromMat64 du package tensor en encapsulant le dataframe dans la structure matrix.\nxT := tensor.FromMat64(mat.DenseCopyOf(\u0026amp;matrix{xDF}))"},{"uri":"/fr/how-to/","title":"How-tos","tags":[],"description":"","content":""},{"uri":"/fr/","title":"Gorgonia","tags":[],"description":"","content":" Gorgonia Gorgonia est une bibliothèque qui facilite la mise en place de mécanismes de machine learning en Go.\nElle permet d\u0026rsquo;écrire et de calculer des équations mathématiques utilisant des tableaux à multiples dimensions.\nDans l\u0026rsquo;idée, cette bibliothèque est semblable à Theano et TensorFlow.\nD\u0026rsquo;une manière générale, cette bibliothèque est relativement bas-niveau, comme Theano, mais possède des objectifs plus ambitieux comme TensorFlow.\nPourquoi utiliser Gorgonia ? La cible principale de Gorgonia est de rendre l\u0026rsquo;expérience du développeur agréable. So vous êtes un Gopher, grâce à Gorgonia, vous avez la possibilité de créer des systèmes utilisant le machine learning qui soient \u0026ldquo;production-ready\u0026rdquo;.\nLe développement en IA/ML est généralement divisé en deux étapes:\n Les expériences pendant lesquels sont conçus les modèles, et pendant lesquels beaucoup de tests sont réalisés. La phase de déploiement pendant laquelle les modèles sont industrialisés pour être opérés à l\u0026rsquo;échelle.  Ces différentes phases sont associées à divers métiers tels que data-scientiste ou data-ingénieur.\nD\u0026rsquo;une manière générale, ces deux étapes ne sont pas réalisées en utilisant les mêmes outils:\n Python/Lua (et les frameworks de type Theano, Torch, etc), sont couramment utilisés dans les phases d\u0026rsquo;expérimentation. Durant les phases d\u0026rsquo;exploitation et de déploiement, le modèle est en général réécrit dans un langage plus performant tel que le C++. (en utilisant par exemple dlib, mlpack etc).  Bien entendu, de nos jours, l\u0026rsquo;écart de performance entre les outils se réduit, ce qui aboutit à un partage des outils entre les différentes phases. TensorFlow est un exemple d\u0026rsquo;outil qui est utilisé dans les deux étapes du développement et qui opère comme un pont entre deux.\nLe but de Gorgonia est le même, mais dans l\u0026rsquo;écosystème Go. Gorgonia est performant. Sa vitesse d\u0026rsquo;exécution sur CPU est comparable à Theano et TensorFlow. Les implémentations GPU sont plus délicates à comparer dû à la charge induite par l\u0026rsquo;utilisation de CGO. Cette partie est en développement actif.\nOrganisation de ce site web Ce site web est composé de 4 sections ayant différents objectifs:\n À propos contient des informations sur le fonctionnement de Gorgonia Reference contient des informations de références sur les fonctionnalités de Gorgonia How To Tutoriels  "},{"uri":"/fr/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/fr/tags/","title":"Tags","tags":[],"description":"","content":""}]
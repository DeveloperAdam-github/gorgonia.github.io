<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gorgonia</title><link>/</link><description>Recent content on Gorgonia</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 30 Oct 2019 22:57:09 +0100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello World</title><link>/tutorials/hello-world/</link><pubDate>Tue, 29 Oct 2019 17:54:31 +0100</pubDate><guid>/tutorials/hello-world/</guid><description>This is a step by step tutorial to do a very simple computation with Gorgonia.
Our goal is to use all the plumbing of Gorgonia to do a simple operation:
$ f(x,y) = x + y $
with x = 2 and y = 5
how it works The equation x + y = z can be represented as a graph:
graph LR; z[z] -- add(Round edge) add[+] -- x add[+] -- y To compute the result, we use 4 steps:</description></item><item><title>こんにちわ世界</title><link>/tutorials/hello-world.jp/</link><pubDate>Tue, 29 Oct 2019 17:54:31 +0100</pubDate><guid>/tutorials/hello-world.jp/</guid><description>これはGorgoniaでとても簡単な計算を行うための段階的なチュートリアルです。
私たちのゴールはGorgoniaのすべての配管を使用して簡単な操作を行うことです:
$ f(x,y) = x + y $
with x = 2 and y = 5
どの様に動作するか x + y = z の評価はグラフで表す事ができます:
graph LR; z[z] -- add(Round edge) add[+] -- x add[+] -- y 結果を計算する為に4つのステップを使います:
Make a similar graph with Gorgonia sets some values on the nodes x and y then instanciate a graph on a gorgonia vm extract the value from node z * Create a graph Create an empty expression graph with this method:</description></item><item><title>Gorgoniaの仕組み</title><link>/about/_index.jp/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/about/_index.jp/</guid><description>このセクションにはGorgoniaの仕組みを説明することを目的とした記事が含まれています。
このセクションの記事は次のとおり:
理解志向である 背景とコンテキストを提供 類似品: 料理の社会史に関する記事</description></item><item><title>チュートリアル</title><link>/tutorials/_index.jp/</link><pubDate>Mon, 28 Oct 2019 11:40:37 +0100</pubDate><guid>/tutorials/_index.jp/</guid><description>Gorgoniaのさまざまな使われ方を試し始める為のさまざまなチュートリアル。
このチュートリアルは:
学習指向 新たな人でも始められる 1つずつのレッスン 類似品: 子供に料理の仕方を教える方法</description></item><item><title>ハウツー</title><link>/how-to/_index.jp/</link><pubDate>Mon, 28 Oct 2019 11:40:47 +0100</pubDate><guid>/how-to/_index.jp/</guid><description>Gorgoniaでさまざまな機械学習を行う方法。
このセクションではGorgoniaを使用してさまざまな問題を解決する方法を説明します。
以下の様なハウツーガイドです:
目標指向 特定の問題を解決する方法を示します 理解可能な手順で構成します 類似品：料理本のレシピ</description></item><item><title>Create a tensor from a Dataframe (gota)</title><link>/how-to/dataframe/</link><pubDate>Wed, 30 Oct 2019 22:57:09 +0100</pubDate><guid>/how-to/dataframe/</guid><description>This howto explains how to create a tensor from a dataframe using gota The goal is to read a csv file and create a *tensor.Dense with shape (2,2).
Create the dataframe from a csv file Consider a csv file with the following content:
sepal_length,sepal_width,petal_length,petal_width,species 5.1 ,3.5 ,1.4 ,0.2 ,setosa 4.9 ,3.0 ,1.4 ,0.2 ,setosa 4.7 ,3.2 ,1.3 ,0.2 ,setosa 4.6 ,3.1 ,1.5 ,0.2 ,setosa 5.0 ,3.6 ,1.4 ,0.2 ,setosa .</description></item><item><title>データフレームからテンソルを作成 (gota)</title><link>/how-to/dataframe.jp/</link><pubDate>Wed, 30 Oct 2019 22:57:09 +0100</pubDate><guid>/how-to/dataframe.jp/</guid><description>このハウツーでは、gotaを使用してデータフレームからテンソルを作成する方法を説明します。 The goal is to read a csv file and create a *tensor.Dense with shape (2,2). ゴールは、csvファイルを読み取り、(2,2) のシェイプの* tensor.Denseを作成することです。
csvファイルからデータフレームを作成する 以下のコンテンツのcsvファイルを考えます:
sepal_length,sepal_width,petal_length,petal_width,species 5.1 ,3.5 ,1.4 ,0.2 ,setosa 4.9 ,3.0 ,1.4 ,0.2 ,setosa 4.7 ,3.2 ,1.3 ,0.2 ,setosa 4.6 ,3.1 ,1.5 ,0.2 ,setosa 5.0 ,3.6 ,1.4 ,0.2 ,setosa ... これはIris flower data setからの抜粋です。 データセットのコピーはここから見つける事ができます。
種別以外のすべての値を含むテンソルを作成します。
gotaを使用してデータフレームを作成する gotaのデータフレームパッケージにはio.Readerを引数として取る関数ReadCSVがあります。
f, err := os.Open(&amp;#34;iris.csv&amp;#34;) if err != nil { log.Fatal(err) } defer f.</description></item><item><title>main</title><link>/_index.jp/</link><pubDate>Tue, 29 Oct 2019 14:59:59 +0100</pubDate><guid>/_index.jp/</guid><description> Gorgonia GorgoniaはGoでの機械学習を楽にするためのライブラリです。
多次元配列を含む数式を簡単に記述して評価します。
TheanoまたはTensorFlowに似た物の様に感じるかもしれませんが場合、それはアイデアが非常に似ているためです。
具体的にはライブラリはTheanoのようにかなり低レベルですが、Tensorflowの様なより高い目標を持っています。
なぜGorgoniaを使うのか? Gorgoniaを使用する主な理由は開発者を楽にする事です。Goスタックを広範囲に使用しているのであれば使い慣れた環境で実稼働対応の機械学習システムを作成する機能にアクセスできます。
大儀ではML/AIは2つのステージに分類されます。1つはさまざまなモデルを構築しテストと再テストを行う実験のステージ。またテストを実施し実際に試され、デプロイされた後のモデルがあるステージ。これらはデータサイエンティストとデータエンジニアのように異なる役割を必要とします。
通常、2つのフェーズには異なるツールが存在します。Python/Lua（Theano、Torchなどを使用)が一般的に使用されます 実験の段階では、C++(dlib、mlpack等より高性能な言語でモデルが書き換えられます)。もちろん今日では格差は縮まりつつあり、人々は頻繁にツールを共有しています。 Tensorflowはこのギャップを埋めるツールの1つです。
Gorgoniaは同じ場所を目指していますがGo環境を提供します。Gorgoniaは現在とても良い性能を発揮します - その速度はTheanoとTensorflowのCPU実装に匹敵します。 GPUの実装はcgoの負担が重いため比較するには多少手間がかかりますが、これらは現在、積極的に改善を行っている領域ですのでご安心ください。
このウェブサイトの構成は? このウェブサイトはさまざまなゴールを持つ4つのセクションで構成されています:
はじめに Gorgoniaの仕組みに関する全ての情報が含まれます リファレンス ハウツー チュートリアル</description></item><item><title>CU</title><link>/cu/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/cu/</guid><description/></item><item><title>Dawson</title><link>/dawson/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/dawson/</guid><description/></item><item><title>Golgi</title><link>/golgi/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/golgi/</guid><description/></item><item><title>Gorgonia</title><link>/gorgonia/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/gorgonia/</guid><description/></item><item><title>RandomKit</title><link>/randomkit/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/randomkit/</guid><description/></item><item><title>Tensor</title><link>/tensor/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/tensor/</guid><description/></item><item><title>vecf32</title><link>/vecf32/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/vecf32/</guid><description/></item><item><title>vecf64</title><link>/vecf64/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/vecf64/</guid><description/></item></channel></rss>
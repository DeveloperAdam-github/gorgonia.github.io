<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>main on Gorgonia</title><link>/</link><description>Recent content in main on Gorgonia</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 29 Oct 2019 14:59:59 +0100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello World</title><link>/tutorials/hello-world/</link><pubDate>Tue, 29 Oct 2019 17:54:31 +0100</pubDate><guid>/tutorials/hello-world/</guid><description>This is a step by step tutorial to do a very simple computation with Gorgonia.
Our goal is to use all the plumbing of Gorgonia to do a simple operation:
$ f(x,y) = x + y $
with x = 2 and y = 5
how it works The equation x + y = z can be represented as a graph:
graph LR; z[z] -- add(Round edge) add[+] -- x add[+] -- y To compute the result, we use 4 steps:</description></item><item><title>Multivariate linear regression on Iris Dataset</title><link>/tutorials/iris/</link><pubDate>Thu, 31 Oct 2019 14:53:37 +0100</pubDate><guid>/tutorials/iris/</guid><description>About We will use Gorgonia to create a linear regression model.
The goal is, to predict the species of the Iris flowers given the characteristics:
sepal_length sepal_width petal_length petal_width The species we want to predict are:
setosa virginica versicolor The goal of this tutorial is to use Gorgonia to find the correct values of $\Theta$ given the iris dataset, in order to write a CLI utility that would look like this:</description></item><item><title>Create a tensor from a Dataframe (gota)</title><link>/how-to/dataframe/</link><pubDate>Wed, 30 Oct 2019 22:57:09 +0100</pubDate><guid>/how-to/dataframe/</guid><description>This howto explains how to create a tensor from a dataframe using gota The goal is to read a csv file and create a *tensor.Dense with shape (2,2).
Create the dataframe from a csv file Consider a csv file with the following content:
sepal_length,sepal_width,petal_length,petal_width,species 5.1 ,3.5 ,1.4 ,0.2 ,setosa 4.9 ,3.0 ,1.4 ,0.2 ,setosa 4.7 ,3.2 ,1.3 ,0.2 ,setosa 4.6 ,3.1 ,1.5 ,0.2 ,setosa 5.0 ,3.6 ,1.4 ,0.2 ,setosa .</description></item><item><title>Save Weights</title><link>/how-to/save-weights/</link><pubDate>Tue, 29 Oct 2019 20:07:16 +0100</pubDate><guid>/how-to/save-weights/</guid><description>Goal The goal of this howto is to describe a way to save the values of the nodes and to restore them.
Implementation The best thing you can do right now is to save the value of the corresponding nodes and restore them.
The tensors are fulfilling the GobEncode and GobDecode interface and this is the best option. You can also save the backend as a slice of elements but this is a little bit trickier.</description></item><item><title>CU</title><link>/cu/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/cu/</guid><description/></item><item><title>Dawson</title><link>/dawson/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/dawson/</guid><description/></item><item><title>Golgi</title><link>/golgi/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/golgi/</guid><description/></item><item><title>Gorgonia</title><link>/gorgonia/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/gorgonia/</guid><description/></item><item><title>RandomKit</title><link>/randomkit/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/randomkit/</guid><description/></item><item><title>Tensor</title><link>/tensor/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/tensor/</guid><description/></item><item><title>vecf32</title><link>/vecf32/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/vecf32/</guid><description/></item><item><title>vecf64</title><link>/vecf64/</link><pubDate>Mon, 28 Oct 2019 11:41:02 +0100</pubDate><guid>/vecf64/</guid><description/></item></channel></rss>
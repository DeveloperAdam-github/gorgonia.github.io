<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ハウツー on Gorgonia</title><link>https://gorgonia.org/ja/how-to/</link><description>Recent content in ハウツー on Gorgonia</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 28 Oct 2019 11:40:47 +0100</lastBuildDate><atom:link href="https://gorgonia.org/ja/how-to/index.xml" rel="self" type="application/rss+xml"/><item><title>Graphviz (dot) を用いた ExprGraph の描画</title><link>https://gorgonia.org/ja/how-to/dot/</link><pubDate>Sun, 01 Dec 2019 10:14:55 +0100</pubDate><guid>https://gorgonia.org/ja/how-to/dot/</guid><description>Gorgonia の encoding パッケージには、ExprGraph を dot language にマーシャリングする関数が含まれています。
これにより graphviz プログラムを用いてグラフの png または svg バージョンを生成することができます。
簡単な方法:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;gorgonia.org/gorgonia&amp;#34; &amp;#34;gorgonia.org/gorgonia/encoding/dot&amp;#34; ) func main() { g := gorgonia.NewGraph() var x, y *gorgonia.Node // define the expression x = gorgonia.NewScalar(g, gorgonia.Float64, gorgonia.WithName(&amp;#34;x&amp;#34;)) y = gorgonia.NewScalar(g, gorgonia.Float64, gorgonia.WithName(&amp;#34;y&amp;#34;)) gorgonia.Add(x, y) b, err := dot.Marshal(g) if err != nil { log.Fatal(err) } fmt.Println(string(b)) } このプログラムを実行して出力を dot プロセスに送り込むと画像が生成されます。
例:
$ go run main.</description></item><item><title>データフレームからテンソルを作成 (gota)</title><link>https://gorgonia.org/ja/how-to/dataframe/</link><pubDate>Wed, 30 Oct 2019 22:57:09 +0100</pubDate><guid>https://gorgonia.org/ja/how-to/dataframe/</guid><description>このハウツーでは、gotaを使用してデータフレームからテンソルを作成する方法を説明します。 The goal is to read a csv file and create a *tensor.Dense with shape (2,2). ゴールは、csvファイルを読み取り、(2,2) のシェイプの* tensor.Denseを作成することです。
csvファイルからデータフレームを作成する 以下のコンテンツのcsvファイルを考えます:
sepal_length,sepal_width,petal_length,petal_width,species 5.1 ,3.5 ,1.4 ,0.2 ,setosa 4.9 ,3.0 ,1.4 ,0.2 ,setosa 4.7 ,3.2 ,1.3 ,0.2 ,setosa 4.6 ,3.1 ,1.5 ,0.2 ,setosa 5.0 ,3.6 ,1.4 ,0.2 ,setosa ... これはIris flower data setからの抜粋です。 データセットのコピーはここから見つける事ができます。
種別以外のすべての値を含むテンソルを作成します。
gotaを使用してデータフレームを作成する gotaのデータフレームパッケージにはio.Readerを引数として取る関数ReadCSVがあります。
f, err := os.Open(&amp;#34;iris.csv&amp;#34;) if err != nil { log.Fatal(err) } defer f.</description></item><item><title>Weightsの保存</title><link>https://gorgonia.org/ja/how-to/save-weights/</link><pubDate>Tue, 29 Oct 2019 20:07:16 +0100</pubDate><guid>https://gorgonia.org/ja/how-to/save-weights/</guid><description>ゴール このハウツーのゴールはノードの値を保存して復元する方法を説明することです。
実装 現状できる最善の方法は、対応するノードの値を保存して復元することです。
テンソルはGobEncodeおよびGobDecodeインターフェースを実現しており、これが最良のオプションです。 バックエンドを要素のスライスとして保存することもできますがこれは少し複雑です。
これを行うサンプルコードを以下に示します(まったく最適化していません。自由に修正してください):
package main import ( &amp;#34;encoding/gob&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;gorgonia.org/gorgonia&amp;#34; &amp;#34;gorgonia.org/tensor&amp;#34; ) var ( backup = &amp;#34;/tmp/example_gorgonia&amp;#34; ) func main() { g := gorgonia.NewGraph() var x, y, z *gorgonia.Node var err error // Create the graph x = gorgonia.NewTensor(g, gorgonia.Float64, 2, gorgonia.WithShape(2, 2), gorgonia.WithName(&amp;#34;x&amp;#34;)) y = gorgonia.NewTensor(g, gorgonia.Float64, 2, gorgonia.WithShape(2, 2), gorgonia.WithName(&amp;#34;y&amp;#34;)) if z, err = gorgonia.Add(x, y); err != nil { log.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gorgoniaの仕組み on Gorgonia</title><link>https://gorgonia.org/ja/about/</link><description>Recent content in Gorgoniaの仕組み on Gorgonia</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 28 Oct 2019 11:41:02 +0100</lastBuildDate><atom:link href="https://gorgonia.org/ja/about/index.xml" rel="self" type="application/rss+xml"/><item><title>計算グラフ</title><link>https://gorgonia.org/ja/about/computation-graph/</link><pubDate>Sun, 10 Nov 2019 21:09:19 +0100</pubDate><guid>https://gorgonia.org/ja/about/computation-graph/</guid><description>Gorgonia はグラフベース _Note_：この記事は このブログ投稿 からインスピレーションを得ています。
Tensorflow や Theano など殆どの深層学習ライブラリと同様に、Gorgonia は方程式がグラフで表現できるという概念に依存しています。
方程式グラフをプログラマーが操作できる ExprGraph オブジェクトとして公開します。
ですので以下の様に書く代わりに:
func main() { fmt.Printf(&amp;#34;%v&amp;#34;, 1+1) } プログラマはこう書くのです:
func main() { // Create a graph. g := gorgonia.NewGraph() // Create a node called &amp;#34;x&amp;#34; with the value 1. x := gorgonia.NodeFromAny(g, 1, gorgonia.WithName(&amp;#34;x&amp;#34;)) // Create a node called &amp;#34;y&amp;#34; with the value 1. y := gorgonia.NodeFromAny(g, 1, gorgonia.WithName(&amp;#34;y&amp;#34;)) // z := x + y z := gorgonia.</description></item></channel></rss>
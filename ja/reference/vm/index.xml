<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VM on Gorgonia</title><link>https://gorgonia.org/ja/reference/vm/</link><description>Recent content in VM on Gorgonia</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 29 Oct 2019 14:59:59 +0100</lastBuildDate><atom:link href="https://gorgonia.org/ja/reference/vm/index.xml" rel="self" type="application/rss+xml"/><item><title>LispMachine</title><link>https://gorgonia.org/ja/reference/vm/lispmachine/</link><pubDate>Tue, 29 Oct 2019 19:50:15 +0100</pubDate><guid>https://gorgonia.org/ja/reference/vm/lispmachine/</guid><description>LispMachine はグラフを入力として受け取るように設計されており、グラフのノードで直接実行されます。 グラフが変更された場合は、単純に新しい軽量 LispMachine を作成して実行します。 LispMachine はサイズが固定されていない recurrent neural networks の作成などのタスクに適しています。
トレードオフとしては LispMachine でのグラフの実行が TapeMachine での実行よりも一般に遅いことです。 グラフの同じ静的な &amp;ldquo;画像&amp;rdquo; が与えられます。</description></item><item><title>Tapemachine</title><link>https://gorgonia.org/ja/reference/vm/tapemachine/</link><pubDate>Tue, 29 Oct 2019 19:50:15 +0100</pubDate><guid>https://gorgonia.org/ja/reference/vm/tapemachine/</guid><description>TapeMachine は一般的にに静的な式を実行するのに役立ちます(つまり計算グラフは変更されない)。 静的な性質があるので TapeMachine は一度だけコンパイルされ何度も式を実行するのに向いています(線形回帰や SVM など)。
技術詳細 TapeMachine はインストラクションのリストに対してグラフを事前コンパイルします。 その後、命令を線形に順次実行します。 主なトレードオフはダイナミズムです。 再コンパイルプロセスが必要になるため、グラフを動的に作成することはできません(コンパイルは比較的高価なため)。 ただし、コード生成段階で多くの最適化が行われるため TapeMachine で実行されるグラフははるかに高速に実行されます。</description></item></channel></rss>